import argparse
import math

import numpy as np
from tensorrtserver.api import *


def sigmoid(x):
    return 1 / (1 + math.exp(-x))

sigmoid_v = np.vectorize(sigmoid)

# Examples for Bert base with 512 seq length

# Example 0
# Text a: Waiving Sven Baertschi signals the end of an era of Canucks hockey defined by failure
# Text a (bis): https canucksarmy com  2019 10 06 waiving-sven-baertschi-signals-the-end-of-an-era-of-canucks-hocke
# Text b: When the Canucks waived Sven Baertschi last Monday, the decision was met with outrage from a large portion of the fanbase. In turn, this outrage was met with confusion from the rest of the fans, as well as the local media. How could a player be simultaneously an asset to his team and unwanted by the rest of the NHL? The truth is, a player can be both a good winger relative to his team and nothing to write home about relative to the rest of the league. That’s just what happens when you continue to run with the players that made up arguably the worst bottom-six in the league last season. There are plenty of value-based critiques one could have about the decision, but part of what makes it especially frustrating is that, for years, the trade the Canucks made for Sven Baertschi has been held up as one of the management team’s great successes, especially of the early Benning/Linden era. You may recall that the Canucks made a habit of trading away draft picks for players in Baertschi’s age range early in Jim Benning’s tenure. The Canucks were looking to fill the so-called “age gap” on their roster that existed between Henrik and Daniel Sedin and younger players like Bo Horvat and Jake Virtanen. Benning explained the thought process behind these moves in a 2016 interview with Kevin Woodley for NHL.com : Many wondered why a team that finished 28th in the NHL was trading picks and prospects instead of stockpiling them, especially with a general manager who was hired in large part for his draft expertise. “I’ve had to move some draft picks in the last couple of years because I want the team to be competitive and I want our young players to grow up in a winning environment,” Benning said. “That’s been hard, moving those picks, but I think we are getting to a point now where unless it’s a really good young player, we won’t be moving any more picks.” Trading those picks was about filling in a generation gap in the roster, with an aging core anchored by Daniel Sedin and Henrik Sedin , who turn 36 before the season, and prospects Bo Horvat (21), Ben Hutton (23) and Jake Virtanen (19). Draft picks were traded away for Derek Dorsett , Linden Vey , Sven Baertschi and Philip Larsen, and in packages for Andrey Pedan, Emerson Etem , Brandon Prust, Sutter and Gudbranson. “There was not a lot of turnover before I came because the team was very good, so we had a bunch of 32- to 34-year-old players and then the kids we were drafting,” Benning said. “That’s tough to win with consistently. You need that age group from 22 to 28, those are players I feel you can win with. Some of the moves we made are going to work out really nice and some other moves didn’t work out, but that’s what we had to try to do to fill in that age group.” It is worth noting that those moves, in fact, did not work out really nice. In fact, the “generation gap” experiment turned out to be a stunning failure on almost every level. Narrowing down which players were targeted specifically to fill that age gap is difficult, but if we apply the label to every player the Canucks acquired between the ages of 21-25 from the moment Jim Benning was hired and the Sedins’ final game before their retirement that was traded for either a draft pick or a younger prospect, we end up with a list of nine so-called “age gap” players. As a refresher, I’ve also included where each player is as of the date of publication: Player Outcome Linden Vey Left as free agent (KHL) Adam Clendening Traded in a package to Pittsburgh for Brandon Sutter Andrey Pedan Traded along with a fourth-round pick to Pittsburgh for Derrick Pouliot Sven Baertschi Placed on waivers Markus Granlund Left as free agent (Edmonton Oilers) Erik Gudbranson Traded to Pittsburgh for Tanner Pearson Emerson Etem Claimed off waivers by Anaheim Ducks Philip Larsen Left as free agent (KHL) Derrick Pouliot Left as free agent (St. Louis Blues) It doesn’t take a genius to look at these moves in totality and conclude the experiment was at least a misstep, if not a full-blown catastrophe. Not only do none of these players remain on the active roster, but if not for Jim Rutherford’s love of acquiring bad defenseman, they’d have nothing to show for all the assets they expended on them. You may wonder what the point of re-litigating years-old transactions is at this stage in the Canucks’ life cycle, but Sven Baertschi’s reassignment signals something that’s gone mostly unacknowledged over the past week: the age gap experiment, along with virtually everything else that happened on the ice from the end of the 2014-15 season to the announcement of the Sedins’ retirement, amounts to nothing less than an abject failure on all fronts. The Canucks’ Third Way mentality of trying to strike a balance between rebuilding and competing not only managed to accomplish neither, but actually ended up handicapping their efforts any time they made moves that hinted at either direction. The only thing that held strong through those disappointing 2014-2018 years was the team’s amateur scouting department, and while there’s a debate to be had about where the Canucks’ drafting stacks up against the rest of the league over the past five years, there’s no question it’s been an area of relative strength. Unfortunately, it’s unlikely to help them in the short term, especially at forward. Podkolzin has two seasons remaining on his KHL contract, Nils Hoglander likely needs an additional year in the SHL and another in the minors at very least before he’s ready to make the jump to the NHL, and once-prized prospects Kole Lind and Jonah Gadjovich will need to drastically improve on their rookie AHL campaigns to still be considered legitimate prospects by this time next year. The only player in the Canucks’ system with a serious chance at becoming an NHL regular this season is Zack MacEwen. The rest are all already on the roster and one, Adam Gaudette, sat in the press box on opening night. No, for this season to be viewed as a success, the Canucks will need more than just encouraging steps forward from their young players. They’ll need to actually win. But accomplishing that goal is going to hinge just as much on the performances of the players they acquired through trades and in free agency as it will on the performances from the ones they acquired through the draft. There’s reason to be skeptical about that, given that the decision-making process that lead to acquiring most of the Canucks’ active roster aside from the “core four” is the same that resulted in the failed Age Gap Experiment. Advertisement - Continue Reading Below When viewed in totality, it’a hard to look at the laundry list of picks the Canucks moved out between 2014-2018 and conclude that they’d be any worse off than they are now. In fact, given the success of the Canucks’ scouting department in recent years, there’s a case to be made that they’d be closer to turning the corner than they are now if they’d just sat on their hands for most of the past half decade. It’s appropriate, then, that the player whose emergence spelled the demise of Jim Benning’s one successful test case in the age gap experiment is Adam Gaudette, a former fifth round pick that wouldn’t even have been in the Canucks’ possession if Mike Gillis hadn’t flipped Raphael Diaz at the 2014 trade deadline in his final move as Canucks GM. By waiving Sven Baertschi, the crown jewel of this experiment, they’ve signaled not only that he’s not in their long-term plans, but that one of the main pillars of the first four years of the Benning era has been an abject failure. To say so isn’t conjecture, it’s the only conclusion one can come to given their stated goal at the time. The aim of all of these moves was ostensibly to bridge the gap between old and young and allow the team’s youngsters to develop in a winning environment. Now, as we enter the sixth season of the Benning era, not one of those players remains on the active roster, and the Canucks have only one of the league’s worst records over that span to show for it. With his assignment to the Utica Comets, Sven Baertschi has become the symbol of an era of Canucks hockey that has been defined by failures both on and off the ice. Luckily, that era is coming to an end. It remains to be seen if the next one will get to be defined by something else.
input_ids_str_0 = "101 23701 6455 21313 25818 21217 5428 7755 1996 2203 1997 2019 3690 1997 26177 3873 4225 2011 4945 16770 26177 27292 2100 4012 10476 2184 5757 23701 6455 1011 21313 1011 25818 21217 5428 1011 7755 1011 1996 1011 2203 1011 1997 1011 2019 1011 3690 1011 1997 1011 26177 1011 21929 3489 102 2043 1996 26177 16301 21313 25818 21217 5428 2197 6928 1010 1996 3247 2001 2777 2007 19006 2013 1037 2312 4664 1997 1996 5470 15058 1012 1999 2735 1010 2023 19006 2001 2777 2007 6724 2013 1996 2717 1997 1996 4599 1010 2004 2092 2004 1996 2334 2865 1012 2129 2071 1037 2447 2022 7453 2019 11412 2000 2010 2136 1998 18162 2011 1996 2717 1997 1996 7097 1029 1996 3606 2003 1010 1037 2447 2064 2022 2119 1037 2204 16072 5816 2000 2010 2136 1998 2498 2000 4339 2188 2055 5816 2000 1996 2717 1997 1996 2223 1012 2008 1521 1055 2074 2054 6433 2043 2017 3613 2000 2448 2007 1996 2867 2008 2081 2039 15835 1996 5409 3953 1011 2416 1999 1996 2223 2197 2161 1012 2045 2024 7564 1997 3643 1011 2241 16218 2015 2028 2071 2031 2055 1996 3247 1010 2021 2112 1997 2054 3084 2009 2926 25198 2003 2008 1010 2005 2086 1010 1996 3119 1996 26177 2081 2005 21313 25818 21217 5428 2038 2042 2218 2039 2004 2028 1997 1996 2968 2136 1521 1055 2307 14152 1010 2926 1997 1996 2220 3841 5582 1013 22066 3690 1012 2017 2089 9131 2008 1996 26177 2081 1037 10427 1997 6202 2185 4433 11214 2005 2867 1999 25818 21217 5428 1521 1055 2287 2846 2220 1999 3958 3841 5582 1521 1055 7470 1012 1996 26177 2020 2559 2000 6039 1996 2061 1011 2170 1523 2287 6578 1524 2006 2037 9238 2008 5839 2090 18745 1998 3817 7367 8718 1998 3920 2867 2066 8945 7570 19146 2102 1998 5180 6819 13320 10224 1012 3841 5582 4541 1996 2245 2832 2369 2122 5829 1999 1037 2355 4357 2007 4901 3536 3051 2005 7097 1012 4012 1024 2116 4999 2339 1037 2136 2008 2736 15538 1999 1996 7097 2001 6202 11214 1998 16746 2612 1997 4518 8197 2989 2068 1010 2926 2007 1037 2236 3208 2040 2001 5086 1999 2312 2112 2005 2010 4433 11532 1012 1523 1045 1521 2310 2018 2000 2693 2070 4433 11214 1999 1996 2197 3232 1997 2086 2138 1045 2215 1996 2136 2000 2022 6975 1998 1045 2215 2256 2402 2867 2000 4982 2039 1999 1037 3045 4044 1010 1524 3841 5582 2056 1012 1523 2008 1521 1055 2042 2524 1010 3048 2216 11214 1010 2021 1045 2228 2057 2024 2893 2000 1037 2391 2085 2073 4983 2009 1521 1055 1037 2428 2204 2402 2447 1010 2057 2180 1521 1056 2022 3048 2151 2062 11214 1012 1524 6202 2216 11214 2001 2055 8110 1999 1037 4245 6578 1999 1996 9238 1010 2007 2019 12520 4563 14453 2011 3817 7367 8718 1998 18745 7367 8718 1010 2040 2735 4029 2077 1996 2161 1010 1998 16746 8945 7570 19146 2102 1006 2538 1007 102"
attention_mask_str_0 = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
token_type_ids_str_0 = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
# Example labels/binarized labels/label idxs:  oic:367 oic:387 (indexes [6, 147]) which are sports # sports/ice hockey
label_ids_112_0  = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
label_ids_162_0  = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Example 1
# Text a: Tuition & Costs for Business Management Bachelor’s Degree | Penn Foster College
# Text a (bis): https www pennfoster edu  programs-and-degrees business-management business-management-bachelors-degree tuition
# Text b: At Penn Foster, we continue to develop new ways to expand and improve student satisfaction. However, if you are not satisfied or can no longer
# continue your studies, we offer a generous refund policy. If you cancel within the first 6 days of enrollment you will receive a full refund. After
# the first 6 days your refund amount will be based on: Lessons completed Tuition collected Enrollment date For more information, visit Penn Foster
# College's refund policy page. Learn even more by viewing a sample enrollment agreement .
# Ground truth labels:  oic:1 # oic:18 # oic:37 which are -> business & industry # business & industry/career development # business & industry/management
input_ids_str_1 = "101 15413 1004 5366 2005 2449 2968 5065 1521 1055 3014 1064 9502 6469 2267 16770 7479 9502 14876 6238 3968 2226 3454 1011 1998 1011 5445 2449 1011 2968 2449 1011 2968 1011 5065 2015 1011 3014 15413 102 2012 9502 6469 1010 2057 3613 2000 4503 2047 3971 2000 7818 1998 5335 3076 9967 1012 2174 1010 2065 2017 2024 2025 8510 2030 2064 2053 2936 3613 2115 2913 1010 2057 3749 1037 12382 25416 8630 3343 1012 2065 2017 17542 2306 1996 2034 1020 2420 1997 10316 2017 2097 4374 1037 2440 25416 8630 1012 2044 1996 2034 1020 2420 2115 25416 8630 3815 2097 2022 2241 2006 1024 8220 2949 15413 5067 10316 3058 2005 2062 2592 1010 3942 9502 6469 2267 1005 1055 25416 8630 3343 3931 1012 4553 2130 2062 2011 10523 1037 7099 10316 3820 1012 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
attention_mask_str_1 = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
token_type_ids_str_1 = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
# For 112 labels -> oic:1 oic:18 or Indexes [4, 55] below
label_ids_112_1 = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# For 162 labels -> oic:1 oic:18 oic:37 or Indexes [4, 55, 117] below
label_ids_162_1 = [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Example 2
# Text a: Race Results at Auto Club Speedway
# Text a (bis): https www racing-reference info  tracks Auto_Club_Speedway
# Text b: NASCAR Cup Series Race Recaps Click on the race number to see the results of that race. View NASCAR Cup Series driver stats at this track Race Date Cars Winner(s) St Make / Model Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-15 06/22/97 42 Jeff Gordon 3 Chevrolet 2.000 P 500 1,697,250 183.015 4 22 155.012 21 1998-10 05/03/98 43 Mark Martin 3 Ford 2.000 P 500 2,022,800 181.772 6 35 140.220 18 1999-10 05/02/99 43 Jeff Gordon 5 Chevrolet 2.000 P 500 2,278,800 5 23 150.276 28 2000-10 04/30/00 43 Jeremy Mayfield 24 Ford 2.000 P 500 2,441,750 186.061 5 22 149.378 20 2001-10 04/29/01 43 Rusty Wallace 19 Ford 2.000 P 500 3,322,207 182.635 6 29 143.118 23 2002-10 04/28/02 43 Jimmie Johnson 4 Chevrolet 2.000 P 500 3,697,421 187.432 5 24 150.088 20 2003-10 04/27/03 43 Kurt Busch 16 Ford 2.000 P 500 4,235,281 186.838 8 34 140.111 19 2004-10 05/02/04 43 Jeff Gordon 16 Chevrolet 2.000 P 500 4,516,016 186.940 6 39 137.268 23 2004-25 09/05/04 43 Elliott Sadler 17 Ford 2.000 P 500 4,798,420 187.417 11 51 128.324 29 2005-02 02/27/05 43 Greg Biffle 5 Ford 2.000 P 500 5,017,255 188.245 7 40 139.697 26 2005-25 09/04/05 43 Kyle Busch 25 Chevrolet 2.000 P 508 5,056,153 185.061 11 43 136.356 30 2006-02 02/26/06 43 Matt Kenseth 31 Ford 2.000 P 502 5,083,604 187.086 7 26 147.852 18 2006-25 09/03/06 43 Kasey Kahne 9 Dodge 2.000 P 500 5,161,883 184.540 7 29 144.462 26 2007-02 02/25/07 43 Matt Kenseth 25 Ford 2.000 P 500 5,185,360 185.735 9 37 138.451 28 2007-25 09/02/07 43 Jimmie Johnson 2 Chevrolet 2.000 P 500 5,236,335 182.399 11 43 131.502 30 2008-02 02/25/08 43 Carl Edwards 9 Ford 2.000 P 500 5,232,311 12 44 132.704 33 2008-25 08/31/08 43 Jimmie Johnson 1 Chevrolet 2.000 P 500 5,280,964 180.397 8 34 138.857 20 2009-02 02/22/09 43 Matt Kenseth 24 Ford 2.000 P 500 5,350,787 183.439 5 43 135.839 19 2009-30 10/11/09 43 Jimmie Johnson 3 Chevrolet 2.000 P 500 5,366,182 183.870 8 30 143.908 29 2010-02 02/21/10 43 Jimmie Johnson 7 Chevrolet 2.000 P 500 5,240,654 183.744 6 30 141.911 26 2010-30 10/10/10 43 Tony Stewart 22 Chevrolet 2.000 P 400 4,573,915 185.285 9 36 131.953 23 2011-05 03/27/11 43 Kevin Harvick 24 Chevrolet 2.000 P 400 5,036,976 184.653 4 16 150.849 18 2012-05 03/25/12 43 Tony Stewart 9 Chevrolet 2.000 P 258 5,147,478 186.403 1 5 160.166 9 2013-05 03/24/13 43 Kyle Busch 4 Toyota 2.000 P 400 5,293,476 187.451 9 46 135.351 17 2014-05 03/23/14 43 Kyle Busch 14 Toyota 2.000 P 412 5,364,091 187.315 9 42 132.987 35 2015-05 03/22/15 43 Brad Keselowski 8 Ford 2.000 P 418 5,403,039 185.142 7 31 140.662 19 2016-05 03/20/16 39 Jimmie Johnson 19 Chevrolet 2.000 P 410 0 188.482 6 33 137.213 26 2017-05 03/26/17 39 Kyle Larson 1 Chevrolet 2.000 P 404 0 187.047 7 29 136.359 17 2018-05 03/18/18 37 Martin Truex, Jr. 1 Toyota 2.000 P 400 0 186.567 5 21 147.526 16 2019-05 03/17/19 38 Kyle Busch 4 Toyota 2.000 P 400 0 180.081 4 22 143.113 18 2020-03 03/01/20 38 Alex Bowman 3 Chevrolet 2.000 P 400 0 179.614 3 13 152.753 16 31 races NASCAR Xfinity Series Race Recaps Click on the race number to see the results of that race. View NASCAR Xfinity Series driver stats at this track Race Date Cars Winner(s) St Make / Model Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-28 10/19/97 42 Todd Bodine 28 Pontiac 2.000 P 300 747,040 175.157 3 18 145.083 11 1998-19 07/19/98 43 Dale Earnhardt, Jr. 2 Chevrolet 2.000 P 300 810,850 174.073 3 17 148.576 7 1999-10 05/01/99 43 Matt Kenseth 2 Chevrolet 2.000 P 300 917,750 8 35 119.960 10 2000-10 04/29/00 43 Matt Kenseth 8 Chevrolet 2.000 P 300 972,550 178.258 7 29 126.375 14 2001-10 04/28/01 43 Hank Parker, Jr. 26 Chevrolet 2.000 P 300 1,069,345 179.198 2 8 155.957 19 2002-09 04/27/02 43 Scott Riggs 6 Ford 2.000 P 300 1,083,176 7 30 131.403 7 2003-09 04/26/03 43 Matt Kenseth 19 Ford 2.000 P 300 1,150,983 183.941 6 30 129.419 10 2004-09 05/01/04 43 Greg Biffle 15 Ford 2.000 P 300 1,208,198 182.223 4 21 138.978 16 2004-25 09/04/04 43 Greg Biffle 14 Ford 2.000 P 300 1,204,337 182.890 4 13 147.844 18 2005-02 02/26/05 43 Mark Martin 3 Ford 2.000 P 300 1,272,650 185.941 8 43 117.251 14 2005-27 09/03/05 43 Carl Edwards 4 Ford 2.000 P 300 1,255,532 181.333 5 22 139.104 12 2006-02 02/25/06 43 Greg Biffle 3 Ford 2.000 P 300 1,324,997 182.588 4 15 147.501 23 2006-27 09/02/06 43 Kasey Kahne 4 Dodge 2.000 P 300 1,301,420 179.399 6 24 135.917 12 2007-02 02/24/07 41 Matt Kenseth 2 Ford 2.000 P 300 1,304,710 180.410 8 33 127.871 13 2007-27 09/01/07 42 Jeff Burton 5 Chevrolet 2.000 P 300 1,314,820 180.316 6 28 127.629 16 2008-02 02/25/08 42 Tony Stewart 2 Toyota 2.000 P 300 1,331,400 5 19 141.769 11 2008-27 08/30/08 43 Kyle Busch 1 Toyota 2.000 P 300 1,339,129 177.401 5 15 144.212 7 2009-02 02/21/09 43 Kyle Busch 2 Toyota 2.000 P 300 1,361,317 179.675 4 23 137.178 6 2009-30 10/10/09 43 Joey Logano 1 Toyota 2.000 P 304 1,336,617 181.164 10 37 122.184 15 2010-02 02/20/10 43 Kyle Busch 2 Toyota 2.000 P 304 1,170,955 181.283 4 18 143.886 12 2010-30 10/09/10 43 Kyle Busch 1 Toyota 2.000 P 300 1,125,708 182.039 6 33 123.669 10 2011-05 03/26/11 43 Kyle Busch 7 Toyota 2.000 P 300 1,007,687 174.838 5 19 140.772 21 2012-05 03/24/12 43 Joey Logano 1 Toyota 2.000 P 300 1,020,187 178.984 4 18 142.330 15 2013-05 03/23/13 40 Kyle Busch 1 Toyota 2.000 P 300 1,037,159 178.607 4 17 141.528 17 2014-05 03/22/14 40 Kyle Larson 8 Chevrolet 2.000 P 300 1,041,827 176.991 4 15 143.942 18 2015-05 03/21/15 40 Kevin Harvick 6 Chevrolet 2.000 P 300 1,202,424 178.288 3 12 147.723 13 2016-05 03/19/16 40 Austin Dillon 6 Chevrolet 2.000 P 300 0 179.955 4 16 143.008 12 2017-05 03/25/17 40 Kyle Larson 7 Chevrolet 2.000 P 300 0 182.556 7 43 116.883 18 2018-05 03/17/18 40 Joey Logano 2 Ford 2.000 P 300 0 181.059 7 32 127.283 6 2019-05 03/16/19 37 Cole Custer 3 Ford 2.000 P 300 0 179.861 5 28 130.703 13 2020-03 02/29/20 36 Harrison Burton 2 Toyota 2.000 P 300 0 180.234 8 36 121.417 13 31 races NASCAR Gander Outdoors Truck Series Race Recaps Click on the race number to see the results of that race. View NASCAR Gander Outdoors Truck Series driver stats at this track Race Date Trucks Winner(s) St Make / Model Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-24 10/18/97 36 Mike Bliss 1 Ford 2.000 P 200 372,600 173.198 4 16 137.195 5 1998-12 07/18/98 36 Jack Sprague 12 Chevrolet 2.000 P 200 341,450 172.022 4 13 141.844 17 1999-25 10/30/99 36 Jack Sprague 3 Chevrolet 2.000 P 200 369,550 173.561 3 15 128.091 14 2000-24 10/28/00 36 Kurt Busch 1 Ford 2.000 P 200 474,365 177.388 3 12 144.260 6 2001-24 11/03/01 36 Ted Musgrave 12 Dodge 2.000 P 200 476,300 173.678 8 32 113.297 12 2002-20 11/02/02 36 Ted Musgrave 11 Dodge 2.000 P 200 504,350 175.850 2 12 140.296 14 2003-19 09/20/03 36 Ted Musgrave 10 Dodge 2.000 P 200 505,450 173.716 2 8 145.926 10 2004-20 10/02/04 36 Todd Bodine 9 Toyota 2.000 P 200 463,077 178.669 4 21 127.141 12 2005-02 02/25/05 36 Steve Park 25 Dodge 2.000 P 200 535,727 178.218 5 21 128.000 7 2006-02 02/24/06 36 Mark Martin 7 Ford 2.000 P 212 552,753 178.980 8 30 121.529 10 2007-02 02/23/07 34 Mike Skinner 2 Toyota 2.000 P 200 553,015 176.354 6 19 130.933 9 2008-02 02/23/08 35 Kyle Busch 20 Toyota 2.000 P 200 566,210 3 9 146.341 10 2009-02 02/21/09 36 Kyle Busch 1 Toyota 2.000 P 200 571,992 174.161 2 8 145.838 4 13 races NASCAR K&N Pro Series West Race Recaps Click on the race number to see the results of that race. View NASCAR K&N Pro Series West driver stats at this track Race Date Cars Winner(s) St Make / Model Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-07 06/21/97 26 Ken Schrader 3 Chevrolet 2.000 P 200 157,960 179.520 7 33 110.311 8 1998-04 05/02/98 36 Ken Schrader 1 Chevrolet 2.000 P 200 196,839 179.623 4 13 138.621 11 1998-09 07/18/98 32 Kevin Harvick 1 Chevrolet 2.000 P 200 196,839 173.779 5 20 126.026 8 1999-04 05/01/99 36 Ricky Craven 5 Ford 2.000 P 200 198,496 180.664 6 30 113.583 12 2000-04 04/29/00 32 Johnny Benson, Jr. 2 Pontiac 2.000 P 206 220,691 180.424 5 25 120.351 24 2001-05 04/28/01 29 Brendan Gaughan 8 Chevrolet 2.000 P 200 213,428 181.593 2 8 152.316 7 2002-03 04/27/02 22 Eric Norris 1 Ford 2.000 P 182 244,020 181.333 3 16 135.708 4 2003-03 04/26/03 28 Steve Portenga 13 Ford 2.000 P 200 226,814 173.544 3 12 140.078 6 2004-03 05/01/04 29 Ken Schrader 6 Pontiac 2.000 P 200 228,072 173.339 3 16 122.595 6 2005-09 09/02/05 25 Burney Lamar 7 Chevrolet 2.000 P 200 229,295 172.224 4 27 102.931 6 2006-10 09/01/06 33 Mike Duncan 10 Chevrolet 2.000 P 200 237,403 172.232 7 44 94.687 12 11 races CART / CCWS Race Recaps Click on the race number to see the results of that race. View CART / CCWS driver stats at this track Race Date Cars Winner(s) St Chassis / Engine Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-17 09/28/97 27 Mark Blundell 8 Reynard / Mercedes 2.000 P 500 0 240.942 5 41 166.575 13 1998-19 11/01/98 28 Jimmy Vasser 2 Reynard / Honda 2.000 P 500 0 233.748 10 74 153.785 25 1999-20 10/31/99 27 Adrian Fernandez 13 Reynard / Ford 2.000 P 500 500,000 235.398 7 58 171.666 18 2000-20 10/30/00 26 Christian Fittipaldi 3 Lola / Ford 2.029 P 507 3,760,000 241.428 11 85 139.563 57 2001-20 11/04/01 26 Cristiano da Matta 2 Lola / Toyota 2.000 P 440 500,000 228.727 8 57 149.073 73 2002-18 11/03/02 18 Jimmy Vasser 6 Lola / Ford 2.000 P 500 478,250 232.011 4 17 197.995 44 6 races NTT IndyCar Series Race Recaps Click on the race number to see the results of that race. View NTT IndyCar Series driver stats at this track Race Date Cars Winner(s) St C/E/T Len Sfc Miles Purse Pole Cau Laps Speed LC 2002-03 03/24/02 27 Sam Hornish, Jr. 4 D/C/F 2.000 P 400 1,057,500 221.422 4 23 179.345 39 2003-15 09/21/03 22 Sam Hornish, Jr. 10 D/C/F 2.000 P 400 1,079,350 226.757 1 6 207.151 16 2004-15 10/03/04 22 Adrian Fernandez 4 G/H/F 2.000 P 400 1,031,500 217.479 5 23 178.826 23 2005-17 10/16/05 22 Dario Franchitti 1 D/H/F 2.000 P 400 1,022,250 219.398 4 29 168.567 17 2012-15 09/15/12 26 Ed Carpenter 5 D/C/F 2.000 P 500 0 216.069 7 43 168.939 29 2013-19 10/19/13 25 Will Power 1 D/C/F 2.000 P 500 0 220.775 7 55 154.867 28 2014-18 08/30/14 22 Tony Kanaan 7 D/C/F 2.000 P 500 0 218.540 1 12 196.111 18 2015-11 06/27/15 23 Graham Rahal 19 D/H/F 2.000 P 500 0 218.952 6 46 168.846 80 C/E/T = Chassis / Engine / Tire codes (click on a race # to see the code definitions) 8 races Indy Lights Series Race Recaps Click on the race number to see the results of that race. View Indy Lights Series driver stats at this track Race Date Cars Winner(s) St Chassis / Engine Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-13 09/27/97 20 Clint Mears 1 Lola / Buick 2.029 P 101 58,200 184.950 4 19 116.467 15 1998-14 10/31/98 26 Mark Hotchkis 2 Lola / Buick 2.029 P 101 58,200 187.668 1 7 153.395 8 1999-12 10/30/99 20 Jonny Kane 1 Lola / Buick 2.029 P 101 58,200 186.346 5 18 129.902 12 2000-12 10/29/00 18 Scott Dixon 2 Lola / Buick 2.029 P 101 74,200 185.025 2 2 183.672 3 2001-12 11/04/01 10 Townsend Bell 1 Lola / Buick 2.029 P 89 69,800 1 3 182.334 0 2003-11 09/20/03 15 Mark Taylor 1 Dallara / Infiniti 2.000 P 100 0 1 9 145.536 0 2004-11 10/02/04 15 James Chesson 9 Dallara / Infiniti 2.000 P 100 0 3 13 146.894 6 2005-14 10/16/05 14 Wade Cunningham 5 Dallara / Infiniti 2.000 P 100 0 3 13 139.170 15 2012-12 09/15/12 14 Carlos Munoz 2 Dallara / Infiniti 2.000 P 100 173,500 189.640 2 5 159.410 0 2013-12 10/19/13 9 Carlos Munoz 2 Dallara / Infiniti 2.000 P 100 143,500 189.267 0 0 186.552 2 10 races IROC Race Recaps Click on the race number to see the results of that race. View IROC driver stats at this track Race Date Cars Winner(s) St Make / Model Len Sfc Miles Purse Pole Cau Laps Speed LC 1997-03 06/21/97 12 Mark Martin 12 Pontiac 2.000 P 100 0 2 164.384 5 1998-02 05/02/98 12 Mark Martin 10 Pontiac 2.000 P 100 0 1 162.089 4 2002-02 04/27/02 12 Kevin Harvick 4 Pontiac 2.000 P 100 0 0 161.580 7 3 races
input_ids_str_2 = "101 2679 3463 2012 8285 2252 10688 16770 7479 3868 1011 4431 18558 3162 8285 1035 2252 1035 10688 102 11838 2452 2186 2679 28667 9331 2015 11562 2006 1996 2679 2193 2000 2156 1996 3463 1997 2008 2679 1012 3193 11838 2452 2186 4062 26319 2012 2023 2650 2679 3058 3765 3453 1006 1055 1007 2358 2191 1013 2944 18798 16420 2278 2661 8722 6536 6187 2226 10876 3177 29215 2722 1011 2321 5757 1013 2570 1013 5989 4413 5076 5146 1017 14724 1016 1012 2199 1052 3156 1015 1010 6353 2581 1010 5539 18677 1012 5890 2629 1018 2570 14168 1012 5890 2475 2538 2687 1011 2184 5709 1013 6021 1013 5818 4724 2928 3235 1017 4811 1016 1012 2199 1052 3156 1016 1010 6185 2475 1010 5385 18596 1012 6255 2475 1020 3486 8574 1012 10545 2324 2639 1011 2184 5709 1013 6185 1013 5585 4724 5076 5146 1019 14724 1016 1012 2199 1052 3156 1016 1010 24709 1010 5385 1019 2603 5018 1012 25113 2654 2456 1011 2184 5840 1013 2382 1013 4002 4724 7441 27224 2484 4811 1016 1012 2199 1052 3156 1016 1010 28015 1010 9683 19609 1012 5757 2487 1019 2570 17332 1012 4261 2620 2322 2541 1011 2184 5840 1013 2756 1013 5890 4724 13174 7825 2539 4811 1016 1012 2199 1052 3156 1017 1010 23768 1010 19843 17691 1012 6191 2629 1020 2756 16065 1012 12963 2603 2526 1011 2184 5840 1013 2654 1013 6185 4724 24671 3779 1018 14724 1016 1012 2199 1052 3156 1017 1010 6353 2581 1010 29403 19446 1012 4724 2475 1019 2484 5018 1012 5511 2620 2322 2494 1011 2184 5840 1013 2676 1013 6021 4724 9679 15840 2385 4811 1016 1012 2199 1052 3156 1018 1010 17825 1010 22955 19609 1012 6640 2620 1022 4090 8574 1012 11118 2539 2432 1011 2184 5709 1013 6185 1013 5840 4724 5076 5146 2385 14724 1016 1012 2199 1052 3156 1018 1010 4868 2575 1010 5890 2575 19609 1012 6365 2692 1020 4464 14989 1012 25143 2603 2432 1011 2423 5641 1013 5709 1013 5840 4724 9899 29012 2459 4811 1016 1012 2199 1052 3156 1018 1010 6535 2620 1010 17442 19446 1012 27519 2340 4868 11899 1012 27234 2756 2384 1011 6185 6185 1013 2676 1013 5709 4724 6754 12170 18142 1019 4811 1016 1012 2199 1052 3156 1019 1010 5890 2581 1010 20637 19121 1012 21005 1021 2871 16621 1012 6353 2581 2656 2384 1011 2423 5641 1013 5840 1013 5709 4724 7648 15840 2423 14724 1016 1012 2199 1052 2753 2620 1019 1010 5709 2575 1010 16710 15376 1012 5757 2487 2340 4724 15407 1012 27509 2382 2294 1011 6185 6185 1013 2656 1013 5757 4724 4717 6358 13462 2232 2861 4811 1016 1012 2199 1052 2753 2475 1019 1010 5511 2509 1010 3438 2549 19446 1012 5511 2575 1021 2656 16471 1012 5594 2475 2324 2294 1011 2423 5641 1013 6021 1013 5757 4724 10556 7952 19361 2063 1023 11898 1016 1012 2199 1052 3156 1019 1010 17365 1010 6070 2509 19681 1012 20263 1021 102"
attention_mask_str_2 = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
token_type_ids_str_2 = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
# Example labels/binarized labels/label idxs:  oic:367 oic:381 (indexes [6, 143] below) which are sports # sports/sports fans/auto racing
label_ids_112_2  = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
label_ids_162_2  = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

prefabricated_examples = {

    0: {
        'input_ids': [int(elem) for elem in input_ids_str_0.split(" ")],
        'segment_ids': [int(elem) for elem in token_type_ids_str_0.split(" ")],
        'input_mask': [int(elem) for elem in attention_mask_str_0.split(" ")],
        'labels': label_ids_112_0
    },
    1: {
        'input_ids': [int(elem) for elem in input_ids_str_1.split(" ")],
        'segment_ids': [int(elem) for elem in token_type_ids_str_1.split(" ")],
        'input_mask': [int(elem) for elem in attention_mask_str_1.split(" ")],
        'labels': label_ids_112_1
    },
    2: {
        'input_ids': [int(elem) for elem in input_ids_str_2.split(" ")],
        'segment_ids': [int(elem) for elem in token_type_ids_str_2.split(" ")],
        'input_mask': [int(elem) for elem in attention_mask_str_2.split(" ")],
        'labels': label_ids_112_2
    }
}




if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--target_model", type=str, default="bert", required=True,
                        help="Target model name in tensorrt")
    parser.add_argument('--random_tensors', action="store_true", required=False, default=False,
                        help='Pass random tensors instead of the predefined sample')
    parser.add_argument('--batch-size', type=int, default=1,
                        help='batch size for inference. default: 1')
    parser.add_argument("--server-url", type=str, default="localhost:9001",
                        help="Inference server URL. Default is localhost:9001.")
    parser.add_argument('--format', type=str, required=False, default='onnx',
                        help='Format ("ts"/"onnx") used to ' +
                             'communicate with inference service. Default is "onnx".')
    args = parser.parse_args()

    print("Target Model: {}".format(args.target_model))
    print("Random tensors: {}".format(args.random_tensors))
    print("Batch size: {}".format(args.batch_size))
    print("Server url: {}".format(args.server_url))
    print("Format: {}".format(args.format))

    batch_size = args.batch_size
    protocol = ProtocolType.from_str('grpc')

    health_ctx = ServerHealthContext(args.server_url, protocol, http_headers="", verbose=True)
    print("Is server endpoint alive? {}".format(health_ctx.is_live()))

    dtype = np.int64
    input_ids = np.array([], dtype=dtype)
    input_mask = np.array([], dtype=dtype)
    segment_ids = np.array([], dtype=dtype)
    for i in range(batch_size):
        example_input_ids = np.random.randint(low=0, high=10000, size=512, dtype=dtype) if args.random_tensors else prefabricated_examples[i % len(prefabricated_examples)]['input_ids']
        if input_ids.size == 0:
            input_ids = np.append(input_ids, np.array(example_input_ids, dtype=dtype), axis=0)
        else:
            input_ids = np.vstack((input_ids, np.array(example_input_ids, dtype=dtype)))

        example_input_mask = np.random.randint(low=0, high=2, size=512, dtype=dtype) if args.random_tensors else prefabricated_examples[i % len(prefabricated_examples)]['input_mask']
        if input_mask.size == 0:
            input_mask = np.append(input_mask, np.array(example_input_mask, dtype=dtype), axis=0)
        else:
            input_mask = np.vstack((input_mask, np.array(example_input_mask, dtype=dtype)))

        example_segment_ids = np.random.randint(low=0, high=2, size=512, dtype=dtype) if args.random_tensors else prefabricated_examples[i % len(prefabricated_examples)]['segment_ids']
        if segment_ids.size == 0:
            segment_ids = np.append(segment_ids, np.array(example_segment_ids, dtype=dtype), axis=0)
        else:
            segment_ids = np.vstack((segment_ids, np.array(example_segment_ids, dtype=dtype)))

    # prepare inputs
    if args.format == "ts":
        if batch_size == 1:
            input_dict = {
                "input__0": [input_ids],
                "input__1": [input_mask],
                "input__2": [segment_ids]
            }
        else:
            input_dict = {
                "input__0": tuple(input_ids[i] for i in range(batch_size)),
                "input__1": tuple(input_mask[i] for i in range(batch_size)),
                "input__2": tuple(segment_ids[i] for i in range(batch_size))
            }
    else:
        if batch_size == 1:
            input_dict = {
                "input_ids": [input_ids],
                "input_mask": [input_mask],
                "token_type_ids": [segment_ids]
            }
        else:
            input_dict = {
                "input_ids": tuple(input_ids[i] for i in range(batch_size)),
                "input_mask": tuple(input_mask[i] for i in range(batch_size)),
                "token_type_ids": tuple(segment_ids[i] for i in range(batch_size))
            }

    # prepare outputs
    if args.format == "ts":
        output_keys = [
            "output__0",
        ]
    else:
        output_keys = [
            "output",
        ]

    output_dict = {}
    for k in output_keys:
        output_dict[k] = InferContext.ResultFormat.RAW

    infer_ctx = InferContext(args.server_url, protocol, args.target_model, -1, "", True)

    result = infer_ctx.run(input_dict, output_dict, batch_size)

    # get the result
    if args.format == "ts":
        logits = result["output__0"]
    else:
        logits = result["output"]

    preds=sigmoid_v(logits)

    for i in range(len(preds)):
        print("Predictions for example {}".format(i))
        binary_predictions = np.zeros(preds[i].shape, dtype=int)
        for index, score in enumerate(preds[i]):
            if float(score) > 0.5:
                binary_predictions[index] = int(1)
        print(binary_predictions.nonzero())
